{"title":"Mini-Project 1: Sampling Distribution of the Sample Minimum and Maximum","markdown":{"yaml":{"title":"Mini-Project 1: Sampling Distribution of the Sample Minimum and Maximum","format":"html"},"headingText":"test function once:","containsRefs":false,"markdown":"\n\n```{r output=FALSE}\nlibrary(tidyverse)\n```\n\n```{r echo=FALSE}\n#create population graphs\n\nnorm_df <- tibble(x = seq(3, 17, length.out = 1000),\n                  dens = dnorm(x, mean = 10, sd = 2),\n                  pop = \"normal(10, 4)\")\nunif_df <- tibble(x = seq(7, 13, length.out = 1000),\n                  dens = dunif(x, 7, 13),\n                  pop = \"uniform(7, 13)\")\nexp_df <- tibble(x = seq(0, 10, length.out = 1000),\n                 dens = dexp(x, 0.5),\n                 pop = \"exp(0.5)\")\nbeta_df <- tibble(x = seq(0, 1, length.out = 1000),\n                  dens = dbeta(x, 8, 2),\n                  pop = \"beta(8, 2)\")\n\npop_plot <- bind_rows(norm_df, unif_df, exp_df, beta_df) |>\n  mutate(pop = fct_relevel(pop, c(\"normal(10, 4)\", \"uniform(7, 13)\",\n                                  \"exp(0.5)\", \"beta(8, 2)\")))\n\nggplot(data = pop_plot, aes(x = x, y = dens)) +\n  geom_line() +\n  theme_minimal() +\n  facet_wrap(~ pop, nrow = 1, scales = \"free\") +\n  labs(title = \"Population Distributions for Each Simulation Setting\")\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_min <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n\nnorm_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n, \"for the Normal Distribution\"))\n\nmins_df |>\n  summarise(min_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_max <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n\nnorm_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n,\"for the Normal Distribution\"))\n\nmaxs_df |>\n  summarise(max_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\ntheta1 <- 7          # population mean\ntheta2 <- 13        # population standard deviation\n\ngenerate_samp_min <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(theta1 = theta1, theta2 = theta2, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(theta1 = theta1, theta2 = theta2, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n\nunif_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"darkblue\", fill = \"skyblue\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n,\"for the Uniform Distribution\"))\n\nmins_df |>\n  summarise(min_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\ntheta1 <- 7          # population mean\ntheta2 <- 13        # population standard deviation\n\ngenerate_samp_max <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(theta1 = theta1, theta2 = theta2, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(theta1 = theta1, theta2 = theta2, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n\nunif_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"darkblue\", fill = \"skyblue\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n, \"for the Uniform Distribution\"))\n\nmaxs_df |>\n  summarise(max_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5       # sample size\nlambda <- 0.5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_exp_min <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_exp_min(lambda = lambda, n = n)\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nmins <- map_dbl(1:nsim, \\(i) generate_exp_min(lambda = lambda, n = n))\n\n## each number represents the sample mean from __one__ sample.\nmins_df <- tibble(mins)\n\nexp_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n, \"for the Exponential Distribution\"))\n\nmins_df |>\n  summarise(min_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5       # sample size\nlambda <- 0.5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_exp_max <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_exp_max(lambda = lambda, n = n)\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nmaxs <- map_dbl(1:nsim, \\(i) generate_exp_max(lambda = lambda, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmaxs_df <- tibble(maxs)\n\nexp_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n, \"for the Exponential Distribution\"))\n\nmaxs_df |>\n  summarise(max_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\nbeta <- 2          # population mean\nalpha <- 8        # population standard deviation\n\ngenerate_samp_min <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(alpha = alpha, beta = beta, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(alpha = alpha, beta = beta, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n\nbeta_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"red\", fill = \"orange\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n, \"for the Beta Distribution\"))\n\nmins_df |>\n  summarise(min_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\nalpha <- 8         # population mean\nbeta <- 2        # population standard deviation\n\ngenerate_samp_max <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\ngenerate_samp_max(alpha = alpha, beta = beta, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(alpha = alpha, beta = beta, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n\nbeta_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"red\", fill = \"orange\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n, \"for the Beta Distribution\"))\n\nmaxs_df |>\n  summarise(max_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n\n```\n\nMinimum Sampling Distribution Plots\n\n```{r}\nnorm_min\nunif_min\nexp_min\nbeta_min\n```\n\nMaximum Sampling Distribution Plots\n\n```{r}\nnorm_max\nunif_max\nexp_max\nbeta_max\n```\n\n|   | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n| $\\text{E}(Y_{min})$ | 7.67 | 8.01 | 0.387 | 0.645 |\n| $\\text{E}(Y_{max})$ | 12.3 | 12.0 | 4.52 | 0.921 |\n|  |  |  |  |  |\n| $\\text{SE}(Y_{min})$ | 1.31 | 0.835 | 0.388 | 0.108 |\n| $\\text{SE}(Y_{max})$ | 1.34 | 0.849 | 2.37 | 0.0457 |\n\n: Table of Results {.striped .hover}\n\n1.  Briefly summarise how SE(Ymin) and SE(Ymax) compare for each of the above population models. Can you propose a general rule or result for how SE(Ymin) and SE(Ymax)compare for a given population?\n\nFor the normal distribution, we see that the Standard Error is essentially the same for both the sample min and max. This makes sense as a normal distribution is symmetrical, so the min and max have an equal probability to be the same distance from the sample mean. The variation in the min and max should also be the same because the variation in the distribution is the same above and below the center. The uniform distribution also has the same Standard Error for the sample min and max. This also makes sense as the uniform distribution has an equal probability for each value and the variation in mins and maxes should be the same. The exponential distribution and Beta distribution do not have the same Standard Error for the min and max. For the exponential distribution, this can be explained by smaller values having a higher density, therefore allowing less variation in the sample minimum than the sample maximum. The higher density at small values means that the minimum with be near the minimum allowed value every time leading to a low variation, while there is much more variation in the maximum. For the Beta distribution, the values on the higher end have a much higher density, leading to less variation in the sample maximum than the sample minimum. The sample minimum has much more variation, as the low density leads to minimums that are more spread. We can predict that for uniform and normal distributions, the standard error for the mins and maxes will be the same, while for exponential distributions, the sample minimum will have a smaller standard error, and the beta distribution will have a smaller standard error for the sample maximum.\n\n2.  Choose either the third (Exponential) or fourth (Beta) population model from the table above. For that population model, find the pdf of ymin and ymax, and, for each of those random variables, sketch the pdfs and use integration to calculate the expected value and standard error. What do you notice about how your answers compare to the simulated answers? Some code is given below to help you plot the pdfs in R:\n\nYmin:\n\npdf(Ymin): n(1-cdf(Y))\\^n-1 \\* pdf(Y)\n\nExpected Value: 0.4\n\nStandard Error: sqrt(0.32 - 0.4\\^2) = sqrt(0.16) = 0.4\n\nYmax:\n\npdf(Ymax): n(cdf(Y))\\^n-1 \\* pdf(Y)\n\nExpected value = 4.566\n\nStandard Error = sqrt(26.709 - 4.566\\^2) = sqrt(5.861) = 2.421\n\nThe calculated answers are close to the simulated answers, with all of them being slightly higher than the simulated values. Overall the simulated values are all very close, within around 0.1 to 0.2 units from the calculated values.\n\n```{r}\nn <- 5\nlambda <- 0.5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 6, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <-n*lambda*exp(-n*lambda*x)\n\n\n## put into tibble and plot\nsamp_min_df <- tibble(x, density)\nggplot(data = samp_min_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n```{r}\nn <- 5\nlambda <- 0.5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 15, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <- n*lambda*exp(-lambda*x)*(1-exp(-lambda*x))^(n-1)\n\n\n## put into tibble and plot\nsamp_max_df <- tibble(x, density)\nggplot(data = samp_max_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n\n","srcMarkdownNoYaml":"\n\n```{r output=FALSE}\nlibrary(tidyverse)\n```\n\n```{r echo=FALSE}\n#create population graphs\n\nnorm_df <- tibble(x = seq(3, 17, length.out = 1000),\n                  dens = dnorm(x, mean = 10, sd = 2),\n                  pop = \"normal(10, 4)\")\nunif_df <- tibble(x = seq(7, 13, length.out = 1000),\n                  dens = dunif(x, 7, 13),\n                  pop = \"uniform(7, 13)\")\nexp_df <- tibble(x = seq(0, 10, length.out = 1000),\n                 dens = dexp(x, 0.5),\n                 pop = \"exp(0.5)\")\nbeta_df <- tibble(x = seq(0, 1, length.out = 1000),\n                  dens = dbeta(x, 8, 2),\n                  pop = \"beta(8, 2)\")\n\npop_plot <- bind_rows(norm_df, unif_df, exp_df, beta_df) |>\n  mutate(pop = fct_relevel(pop, c(\"normal(10, 4)\", \"uniform(7, 13)\",\n                                  \"exp(0.5)\", \"beta(8, 2)\")))\n\nggplot(data = pop_plot, aes(x = x, y = dens)) +\n  geom_line() +\n  theme_minimal() +\n  facet_wrap(~ pop, nrow = 1, scales = \"free\") +\n  labs(title = \"Population Distributions for Each Simulation Setting\")\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_min <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n\nnorm_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n, \"for the Normal Distribution\"))\n\nmins_df |>\n  summarise(min_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_max <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n\nnorm_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n,\"for the Normal Distribution\"))\n\nmaxs_df |>\n  summarise(max_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\ntheta1 <- 7          # population mean\ntheta2 <- 13        # population standard deviation\n\ngenerate_samp_min <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(theta1 = theta1, theta2 = theta2, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(theta1 = theta1, theta2 = theta2, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n\nunif_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"darkblue\", fill = \"skyblue\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n,\"for the Uniform Distribution\"))\n\nmins_df |>\n  summarise(min_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\ntheta1 <- 7          # population mean\ntheta2 <- 13        # population standard deviation\n\ngenerate_samp_max <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(theta1 = theta1, theta2 = theta2, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(theta1 = theta1, theta2 = theta2, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n\nunif_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"darkblue\", fill = \"skyblue\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n, \"for the Uniform Distribution\"))\n\nmaxs_df |>\n  summarise(max_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5       # sample size\nlambda <- 0.5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_exp_min <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_exp_min(lambda = lambda, n = n)\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nmins <- map_dbl(1:nsim, \\(i) generate_exp_min(lambda = lambda, n = n))\n\n## each number represents the sample mean from __one__ sample.\nmins_df <- tibble(mins)\n\nexp_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n, \"for the Exponential Distribution\"))\n\nmins_df |>\n  summarise(min_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5       # sample size\nlambda <- 0.5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_exp_max <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_exp_max(lambda = lambda, n = n)\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nmaxs <- map_dbl(1:nsim, \\(i) generate_exp_max(lambda = lambda, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmaxs_df <- tibble(maxs)\n\nexp_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n, \"for the Exponential Distribution\"))\n\nmaxs_df |>\n  summarise(max_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\nbeta <- 2          # population mean\nalpha <- 8        # population standard deviation\n\ngenerate_samp_min <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(alpha = alpha, beta = beta, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(alpha = alpha, beta = beta, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n\nbeta_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"red\", fill = \"orange\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n, \"for the Beta Distribution\"))\n\nmins_df |>\n  summarise(min_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n```{r echo=FALSE, output=FALSE}\nn <- 5            # sample size\nalpha <- 8         # population mean\nbeta <- 2        # population standard deviation\n\ngenerate_samp_max <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\ngenerate_samp_max(alpha = alpha, beta = beta, n = n)\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(alpha = alpha, beta = beta, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n\nbeta_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"red\", fill = \"orange\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n, \"for the Beta Distribution\"))\n\nmaxs_df |>\n  summarise(max_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n\n```\n\nMinimum Sampling Distribution Plots\n\n```{r}\nnorm_min\nunif_min\nexp_min\nbeta_min\n```\n\nMaximum Sampling Distribution Plots\n\n```{r}\nnorm_max\nunif_max\nexp_max\nbeta_max\n```\n\n|   | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n| $\\text{E}(Y_{min})$ | 7.67 | 8.01 | 0.387 | 0.645 |\n| $\\text{E}(Y_{max})$ | 12.3 | 12.0 | 4.52 | 0.921 |\n|  |  |  |  |  |\n| $\\text{SE}(Y_{min})$ | 1.31 | 0.835 | 0.388 | 0.108 |\n| $\\text{SE}(Y_{max})$ | 1.34 | 0.849 | 2.37 | 0.0457 |\n\n: Table of Results {.striped .hover}\n\n1.  Briefly summarise how SE(Ymin) and SE(Ymax) compare for each of the above population models. Can you propose a general rule or result for how SE(Ymin) and SE(Ymax)compare for a given population?\n\nFor the normal distribution, we see that the Standard Error is essentially the same for both the sample min and max. This makes sense as a normal distribution is symmetrical, so the min and max have an equal probability to be the same distance from the sample mean. The variation in the min and max should also be the same because the variation in the distribution is the same above and below the center. The uniform distribution also has the same Standard Error for the sample min and max. This also makes sense as the uniform distribution has an equal probability for each value and the variation in mins and maxes should be the same. The exponential distribution and Beta distribution do not have the same Standard Error for the min and max. For the exponential distribution, this can be explained by smaller values having a higher density, therefore allowing less variation in the sample minimum than the sample maximum. The higher density at small values means that the minimum with be near the minimum allowed value every time leading to a low variation, while there is much more variation in the maximum. For the Beta distribution, the values on the higher end have a much higher density, leading to less variation in the sample maximum than the sample minimum. The sample minimum has much more variation, as the low density leads to minimums that are more spread. We can predict that for uniform and normal distributions, the standard error for the mins and maxes will be the same, while for exponential distributions, the sample minimum will have a smaller standard error, and the beta distribution will have a smaller standard error for the sample maximum.\n\n2.  Choose either the third (Exponential) or fourth (Beta) population model from the table above. For that population model, find the pdf of ymin and ymax, and, for each of those random variables, sketch the pdfs and use integration to calculate the expected value and standard error. What do you notice about how your answers compare to the simulated answers? Some code is given below to help you plot the pdfs in R:\n\nYmin:\n\npdf(Ymin): n(1-cdf(Y))\\^n-1 \\* pdf(Y)\n\nExpected Value: 0.4\n\nStandard Error: sqrt(0.32 - 0.4\\^2) = sqrt(0.16) = 0.4\n\nYmax:\n\npdf(Ymax): n(cdf(Y))\\^n-1 \\* pdf(Y)\n\nExpected value = 4.566\n\nStandard Error = sqrt(26.709 - 4.566\\^2) = sqrt(5.861) = 2.421\n\nThe calculated answers are close to the simulated answers, with all of them being slightly higher than the simulated values. Overall the simulated values are all very close, within around 0.1 to 0.2 units from the calculated values.\n\n```{r}\nn <- 5\nlambda <- 0.5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 6, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <-n*lambda*exp(-n*lambda*x)\n\n\n## put into tibble and plot\nsamp_min_df <- tibble(x, density)\nggplot(data = samp_min_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n```{r}\nn <- 5\nlambda <- 0.5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 15, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <- n*lambda*exp(-lambda*x)*(1-exp(-lambda*x))^(n-1)\n\n\n## put into tibble and plot\nsamp_max_df <- tibble(x, density)\nggplot(data = samp_max_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":"cosmo","title-block-banner":true,"title":"Mini-Project 1: Sampling Distribution of the Sample Minimum and Maximum"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}