{"title":"Mini-Project 3: Simulation to Investigate Confidence Intervals","markdown":{"yaml":{"title":"Mini-Project 3: Simulation to Investigate Confidence Intervals","format":"html"},"headingText":"N = 10","containsRefs":false,"markdown":"\n\n```{r}\n#| include: false\nlibrary(tidyverse)\nlibrary(resample)\n```\n\n\n```{r}\nn <- 10   # sample size\np <- 0.45  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n```{r}\nn <- 10   # sample size\np <- 0.2  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n## N = 60\n\n```{r}\nn <- 60   # sample size\np <- 0.45  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n```{r}\nn <- 60   # sample size\np <- 0.2  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n## N = 200\n\n```{r}\nn <- 200   # sample size\np <- 0.45  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n```{r}\nn <- 200   # sample size\np <- 0.2  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n## Large Sample Assumptions\n\nn = 10\n\np\\*n = 0.45x10 = 4.5 (1-p)n = 0.55x10 = 5.5 does not hold\n\np\\*n = 0.2x10 = 2 (1-p)n = 0.8x10 = 8 does not hold\n\nn = 60\n\np\\*n = 0.45x60 = 27 (1-p)n = 0.55x60 = 33 holds\n\np\\*n = 0.2x60 = 12 (1-p)n = 0.8x60 = 48 holds but not by a large margin\n\nn = 200\n\np\\*n = 0.45x200 = 90 (1-p)n = 0.55x200 = 110 holds\n\np\\*n = 0.2x200 = 40 (1-p)n = 0.8x200 = 160 holds\n\n|            |               |  sn = 10  |  mn = 60  | ln = 200  |\n|:----------:|:-------------:|:---------:|:---------:|:---------:|\n| $p = 0.45$ | Coverage Rate |   0.876   |  0.9496   |  0.9534   |\n| $p = 0.2$  | Coverage Rate |   0.887   |  0.9246   |  0.9446   |\n|            |               |           |           |           |\n| $p = 0.45$ | Average Width | 0.5835463 | 0.2496143 | 0.1375476 |\n| $p = 0.2$  | Average Width | 0.4365931 | 0.1997524 | 0.110498  |\n\n: Table of Results {.striped .hover}\n\nStDev : sqrt(p(1-p)/n) Avg Width for 95% : 2\\*(1.96\\*stdev)\n\nFor our CI with a sample size of 10, we see that our average width is large, with a wide spread in the confidence interval. For both p levels, the large sample assumption does not hold, and our coverage rate is not 95%. If our p is equal to 0.45, we expect the width of our 95% CI to be 2\\* 1.96\\*sqrt((0.45(1-0.45))/10) = 0.6292. This is wider than our average width of 0.5835 for p = 0.45. This is why our coverage rate is less than 95%. For our p = 0.2, the large sample assumption also does not hold, so our average interval for a 95% confidence interval is wider than our sample average width. For our p = 0.2, our coverage rate of 88.7% is lower than the 95% confidence rate we would expect because our large sample size assumption does not hold. For our p = 0.45, the width of the CI is larger than 0.2, but the coverage rate is similarly different from 95%, because or large sample size assumption does not hold.\n\nFor a sample size of 60, we have a significantly smaller average width for our CI's, for both p levels. The large sample size assumptions do hold, with n being large enough for both p values. If our p is equal to 0.45, we expect the width of our 95% CI to be 2\\* 1.96\\*sqrt((0.45(1-0.45))/60) = 0.2517. This is very close to our sample average width for n = 60, which explains the coverage rate of nearly 95%, with 94.96%. For p = 0.2, we expect the width of our 95% CI to be 2\\* 1.96\\* sqrt((0.2(1-0.2))/60) = 0.2024. This is slightly more than our sample average width which explains the slightly lower coverage rate of p = 0.2. The large sample assumption in this case holds but only by a small margin which explains the coverage rate that is less than the cases that have larger assumptions. The coverage rate is still very close to 95% with this mid level sample size.\n\nFor a sample size of 200, we have even smaller average widths for our CIs, and coverage rates very close to 95%. If our p is equal to 0.45, we expect the width of our 95% CI to be 2\\* 1.96\\*sqrt((0.45(1-0.45))/200) = 0.1379. This is very close to our sample value for average width, with a coverage rate of 95.34%, very close to 95%. For p = 0.2, we expect the width of our 95% CI to be 2\\* 1.96\\* sqrt((0.2(1-0.2))/200) = 0.11087. This value is also very close to our sample average width, leading to a coverage rate of 94.46%, again very close to 95%. We see as our sample size increases, our expected average width and sample average width begin to match better, leading to coverage rates that approach 95%. We can see for small sample sizes where the large sample size assumption does not hold, the coverage rate and expected average width are not nearly as close to the simulated values.\n","srcMarkdownNoYaml":"\n\n```{r}\n#| include: false\nlibrary(tidyverse)\nlibrary(resample)\n```\n\n## N = 10\n\n```{r}\nn <- 10   # sample size\np <- 0.45  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n```{r}\nn <- 10   # sample size\np <- 0.2  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n## N = 60\n\n```{r}\nn <- 60   # sample size\np <- 0.45  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n```{r}\nn <- 60   # sample size\np <- 0.2  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n## N = 200\n\n```{r}\nn <- 200   # sample size\np <- 0.45  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n```{r}\nn <- 200   # sample size\np <- 0.2  # population proportion\n\n\ngenerate_samp_prop <- function(n, p) {\n  x <- rbinom(1, n, p) # randomly generate number of successes for the sample\n\n  ## number of successes divided by sample size\n  phat <- x / n\n\n  ## 95% confidence interval\n  lb <- phat - 1.96 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.96 * sqrt(phat * (1 - phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n\n## how many ci's do we want?\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\nprop_ci_df |> mutate(coverage = if_else(p > lb & p < ub,\n                                   true = 1, \n                                   false = 0)) |> \n        summarise(avg_interval_width = mean(ub - lb),\n                        avg_coverage_rate = mean(coverage))\n```\n\n## Large Sample Assumptions\n\nn = 10\n\np\\*n = 0.45x10 = 4.5 (1-p)n = 0.55x10 = 5.5 does not hold\n\np\\*n = 0.2x10 = 2 (1-p)n = 0.8x10 = 8 does not hold\n\nn = 60\n\np\\*n = 0.45x60 = 27 (1-p)n = 0.55x60 = 33 holds\n\np\\*n = 0.2x60 = 12 (1-p)n = 0.8x60 = 48 holds but not by a large margin\n\nn = 200\n\np\\*n = 0.45x200 = 90 (1-p)n = 0.55x200 = 110 holds\n\np\\*n = 0.2x200 = 40 (1-p)n = 0.8x200 = 160 holds\n\n|            |               |  sn = 10  |  mn = 60  | ln = 200  |\n|:----------:|:-------------:|:---------:|:---------:|:---------:|\n| $p = 0.45$ | Coverage Rate |   0.876   |  0.9496   |  0.9534   |\n| $p = 0.2$  | Coverage Rate |   0.887   |  0.9246   |  0.9446   |\n|            |               |           |           |           |\n| $p = 0.45$ | Average Width | 0.5835463 | 0.2496143 | 0.1375476 |\n| $p = 0.2$  | Average Width | 0.4365931 | 0.1997524 | 0.110498  |\n\n: Table of Results {.striped .hover}\n\nStDev : sqrt(p(1-p)/n) Avg Width for 95% : 2\\*(1.96\\*stdev)\n\nFor our CI with a sample size of 10, we see that our average width is large, with a wide spread in the confidence interval. For both p levels, the large sample assumption does not hold, and our coverage rate is not 95%. If our p is equal to 0.45, we expect the width of our 95% CI to be 2\\* 1.96\\*sqrt((0.45(1-0.45))/10) = 0.6292. This is wider than our average width of 0.5835 for p = 0.45. This is why our coverage rate is less than 95%. For our p = 0.2, the large sample assumption also does not hold, so our average interval for a 95% confidence interval is wider than our sample average width. For our p = 0.2, our coverage rate of 88.7% is lower than the 95% confidence rate we would expect because our large sample size assumption does not hold. For our p = 0.45, the width of the CI is larger than 0.2, but the coverage rate is similarly different from 95%, because or large sample size assumption does not hold.\n\nFor a sample size of 60, we have a significantly smaller average width for our CI's, for both p levels. The large sample size assumptions do hold, with n being large enough for both p values. If our p is equal to 0.45, we expect the width of our 95% CI to be 2\\* 1.96\\*sqrt((0.45(1-0.45))/60) = 0.2517. This is very close to our sample average width for n = 60, which explains the coverage rate of nearly 95%, with 94.96%. For p = 0.2, we expect the width of our 95% CI to be 2\\* 1.96\\* sqrt((0.2(1-0.2))/60) = 0.2024. This is slightly more than our sample average width which explains the slightly lower coverage rate of p = 0.2. The large sample assumption in this case holds but only by a small margin which explains the coverage rate that is less than the cases that have larger assumptions. The coverage rate is still very close to 95% with this mid level sample size.\n\nFor a sample size of 200, we have even smaller average widths for our CIs, and coverage rates very close to 95%. If our p is equal to 0.45, we expect the width of our 95% CI to be 2\\* 1.96\\*sqrt((0.45(1-0.45))/200) = 0.1379. This is very close to our sample value for average width, with a coverage rate of 95.34%, very close to 95%. For p = 0.2, we expect the width of our 95% CI to be 2\\* 1.96\\* sqrt((0.2(1-0.2))/200) = 0.11087. This value is also very close to our sample average width, leading to a coverage rate of 94.46%, again very close to 95%. We see as our sample size increases, our expected average width and sample average width begin to match better, leading to coverage rates that approach 95%. We can see for small sample sizes where the large sample size assumption does not hold, the coverage rate and expected average width are not nearly as close to the simulated values.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":"cosmo","title-block-banner":true,"title":"Mini-Project 3: Simulation to Investigate Confidence Intervals"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}